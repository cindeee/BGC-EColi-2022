---
title: "Investigating Biosynthetic Gene Cluster in E. Coli pangenomes"
author: "Cindy Sung"
format:
  html:
    df-print: paged
    code-fold: false
    code-tools: true
  pdf: 
    code-fold: true
    code-tools: true
editor: visual
---

# Background
Bacterial genomes from the same species can carry different sets of genes that contribute to different protein-coding and functionality. This collection of genes across all strains is coined 'pangenomes'. The strains all share the same set of core genomes but carry distinct sets of accessory genes. These accessory genes can be acquired by horizontal gene transfer or vertical lineage, which contributes to the genetic and phenotypic variations.

Escherichia coli is a common inhabitant in animal guts and can be found freely in nature. The biodiversity of Ecoli holds an open pangenome distribution, meaning it has a large proportion of accessory genome with a reservoir of \> 13000 genes with \> 700 identified strains. Its importance has been increasingly addressed since one study that shows three E.Coli strains with different pathogenicities can share a low similarity of the proteome. When studying host-microbe interactions in Caenorhabditis elegans, the OP50 strain has been widely used for bacterial food and maintenance, so the pangenomes of Ecoli and many of its biosynthetic pathways have not been widely explored. We aim to investigate the Biosynthetic gene clusters (BGCs) responsible for the biosynthesis of potential secondary metabolites for novel pathways through mining the pangenomes of E. Coli. antiSMASH 6.0 is very useful for mining the microbial genomes and annotating the BGCs.

... 

Here we study the BGCs from different E.Coli pangenomes strains, and this report marks a starter for exploring the data.

Here we study the BGCs from different E.Coli pangenomes strains, and this report marks as a starter for exploring the data.

# Data exploration

Here are some library preparations and 2 datasets.

```{r}
#!warning : false

# loading relevant libraries
library(tidyverse)
library(readr) # read csv
library(readxl) # read excel
library(ggplot2)
library(stringr)
library(broom)
# install.packages("cowplot")
library(cowplot)

# load data 
bgc = read_csv("data/BGCs/antismash_summary.csv")
metadata = read_excel("data/MAIN_metadata.xlsx")
```

### 1. BGCs

Let's first explore the BGCs.

```{r}
dim(bgc)
colnames(bgc)
head(bgc)
```

The dataframe dimension is 2553 row x 6 columns. There are genome labeles, clusters, BGC types and annotated contigs from start to end. Let's investigate the different BGC types and gene lengths.

```{r}
# Let's make a new column for gene length and ID
bgc_fil = bgc %>% 
  select(genome, type, cluster, contig,start,end) %>% 
  # filter out unusable assembled contig reads 
  filter(start!=0) %>% 
  mutate(gene_length = end - start) %>% 
  mutate(ID = paste(genome, type, sep = '_'))

# count the number of bgc types, sorted from largest group
BGC_counts = bgc_fil %>% 
  group_by(type) %>% 
  count(sort = TRUE)
BGC_counts
```

The data can be grouped into 18 BGC types, with the most being thiopeptide(635) followed by NRPS(596).

```{r}
# calculate gene mean and sd
gene_length = bgc_fil %>% 
  group_by(type) %>% 
  summarise(
    gene_mean = mean(gene_length),
    gene_sd = sd(gene_length)
  ) %>% 
  arrange(desc(gene_mean))

# ggplot the gene length  
gene_length %>% 
  #plot points 
  ggplot(aes(y = type,x = gene_mean,
             fill = type)) +
  geom_bar(stat = 'identity', 
           show.legend = F) +
  scale_y_discrete(limits = rev)+ 
  geom_errorbar(aes(xmin=gene_mean-gene_sd, xmax=gene_mean+gene_sd), width=.2) +
  theme_cowplot(10) 
  #reverse order in x axis
  
# save
ggsave('output/figures/barplot_gene_length.pdf',
       width = 6, height = 6)

```

### 2. metadata

Let's explore the metadata to know more about the identities of EColi producing these BGCs.

```{r}
dim(metadata)
head(metadata)
colnames(metadata)
```

There is a discard column to throw away unusable data. We have phylogroup and Broad phenotypes data which are useful. It also contains a fasta column where the genome names are labelled. After removing the '.fasta' extension, We can join the two datasets together.

```{r}
phylo = metadata %>%  
  # filter out the untrustable origins
  filter(Origin %in% c('AUS', 'ECOREF')) %>% 
  # choose undiscarded data
  filter(Discard == 'No') %>% 
  # select the interested data columns
  select(fasta, Broadphenotype, phylogroup) %>% 
  # keep all the columns after selecting distinct rows in fasta
  distinct(fasta, .keep_all = TRUE) %>% 
  # make new col'genome' from 'fasta' to join the genome column
  mutate(genome = str_sub(fasta, start = 1, end = -7)) %>% 
  # delete 'fasta' column
  select(-fasta) 

# join phylo to our bgc data as bgc_extended
bgc_extended = bgc_fil %>% 
  left_join(phylo)
```

### 3. joining data

Let's continue looking at the phylogroups and Broad phenotypes.

```{r}
unique(bgc_extended$phylogroup)
```

There are NAs and Escherichia clade I included in phylogroup. Escherichia clades are often misidentified as E.Coli, so it is removed. We can have the 'E or cladeI' to be classified as phylogroup E.

```{r}
clean_phylo = bgc_extended %>% 
  # drop the NAs
  drop_na(phylogroup) %>%
  # filter out the clade I
  filter(!phylogroup %in% c('cladeI')) %>%
  mutate(phylogroup = replace( phylogroup, phylogroup=='E or cladeI', 'E'))

# ggplot it
clean_phylo %>% 
  ggplot(aes(y = type, 
             fill = phylogroup)) +
  geom_bar(position = "fill", 
           show.legend = T) +
  theme_cowplot(12) +
  scale_y_discrete(limits = rev)

# save
ggsave('output/figures/bgc_phylogroup.pdf',
       width = 6, height = 6)

```

We see that some fo the BGC types are distributed among the phylogroups except group G. Some are dominated by B2 group / a single group.

Here are some statistical comparisons between phylogroups.

```{r}
# some ANOVA test to see difference between gene lengths of phylogroups
anova = aov(gene_length ~ phylogroup, data = clean_phylo)
TukeyHSD(anova)
```
Instead of summary outputs, we can use the broom package to tabulate coefficients from linear models. Take phylogroup B2 and E as an example.
```{r}
# select relevant groups
b2_vs_e = clean_phylo %>% 
  mutate(phylogroup = as.factor(phylogroup)) %>% 
  filter(phylogroup %in% c('B2', 'E')) %>% 
  select(phylogroup, gene_length)

#linear model
model = lm(gene_length ~ phylogroup, 
           data = b2_vs_e)
#summary of model 
sum_model = summary(model)
sum_model 

# tidy the summary 
stats = tidy(sum_model) %>% 
  # column to show the phylogroups being compared
  mutate(comparison = 'B2 VS E',
         .before = 'term') %>% 
  # bye intercept
  filter(term!='(Intercept)')
stats

```
TBC.

⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡾⠋⠉⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠃⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢀⡏⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣠⣤⣤⣤⣤⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⡏⠀⠀⠀⠀⢸⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡤⠴⠒⠊⠉⠉⠀⠀⣿⣿⣿⠿⠋⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⢀⡠⠼⠴⠒⠒⠒⠒⠦⠤⠤⣄⣀⠀⢀⣠⠴⠚⠉⠀⠀⠀⠀⠀⠀⠀⠀⣼⠿⠋⠁⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⣇⠔⠂⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢨⠿⠋⠀⠀⠀⠀⠀⠀⠀⠀⣀⡤⠖⠋⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢰⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⠤⠒⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢀⡟⠀⣠⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⢻⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣤⡤⠤⢴
⠀⠀⠀⠀⠀⠀⣸⠁⣾⣿⣀⣽⡆⠀⠀⠀⠀⠀⠀⠀⢠⣾⠉⢿⣦⠀⠀⠀⢸⡀⠀⠀⢀⣠⠤⠔⠒⠋⠉⠉⠀⠀⠀⠀⢀⡞
⠀⠀⠀⠀⠀⢀⡏⠀⠹⠿⠿⠟⠁⠀⠰⠦⠀⠀⠀⠀⠸⣿⣿⣿⡿⠀⠀⠀⢘⡧⠖⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡼⠀
⠀⠀⠀⠀⠀⣼⠦⣄⠀⠀⢠⣀⣀⣴⠟⠶⣄⡀⠀⠀⡀⠀⠉⠁⠀⠀⠀⠀⢸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⠁⠀
⠀⠀⠀⠀⢰⡇⠀⠈⡇⠀⠀⠸⡾⠁⠀⠀⠀⠉⠉⡏⠀⠀⠀⣠⠖⠉⠓⢤⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠃⠀⠀
⠀⠀⠀⠀⠀⢧⣀⡼⠃⠀⠀⠀⢧⠀⠀⠀⠀⠀⢸⠃⠀⠀⠀⣧⠀⠀⠀⣸⢹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠃⠀⠀⠀
⠀⠀⠀⠀⠀⠈⢧⡀⠀⠀⠀⠀⠘⣆⠀⠀⠀⢠⠏⠀⠀⠀⠀⠈⠳⠤⠖⠃⡟⠀⠀⠀⢾⠛⠛⠛⠛⠛⠛⠛⠛⠁⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠙⣆⠀⠀⠀⠀⠈⠦⣀⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⠙⢦⠀⠀⠘⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢠⡇⠙⠦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠴⠋⠸⡇⠈⢳⡀⠀⢹⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⡼⣀⠀⠀⠈⠙⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠀⠀⠀⠀⣷⠴⠚⠁⠀⣀⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⡴⠁⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣆⡴⠚⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣼⢷⡆⠀⣠⡴⠧⣄⣇⠀⠀⠀⠀⠀⠀⠀⢲⠀⡟⠀⠀⠀⠀⠀⠀⠀⢀⡇⣠⣽⢦⣄⢀⣴⣶⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⡿⣼⣽⡞⠁⠀⠀⠀⢹⡀⠀⠀⠀⠀⠀⠀⠈⣷⠃⠀⠀⠀⠀⠀⠀⠀⣼⠉⠁⠀⠀⢠⢟⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣷⠉⠁⢳⠀⠀⠀⠀⠈⣧⠀⠀⠀⠀⠀⠀⠀⣻⠀⠀⠀⠀⠀⠀⠀⣰⠃⠀⠀⠀⠀⠏⠀⠀⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠹⡆⠀⠈⡇⠀⠀⠀⠀⠘⣆⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⣰⠃⠀⠀⠀⠀⠀⠀⠀⣸⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⢳⡀⠀⠙⠀⠀⠀⠀⠀⠘⣆⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⣰⠃⠀⠀⠀⠀⢀⡄⠀⢠⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢳⡀⣰⣀⣀⣀⠀⠀⠀⠘⣦⣀⠀⠀⠀⡇⠀⠀⠀⢀⡴⠃⠀⠀⠀⠀⠀⢸⡇⢠⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠉⠉⠀⠀⠈⠉⠉⠉⠙⠻⠿⠾⠾⠻⠓⢦⠦⡶⡶⠿⠛⠛⠓⠒⠒⠚⠛⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀